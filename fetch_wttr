# !/usr/bin/bash
# Title: fetch_wttr
# Date: 05-19-2024 
# Author: TomHenry Reagan
# More info at: https://wttr.in/:help
#
######################### LICENSE INFO #################################
#    fetch_wttr: fetch weather reports from wttr.in, with i3status compatibility
#    Copyright (C) 2024 TomHenry Reagan 
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#########################################################################

run_fetch_wttr() {

  # Handle options
  TEMP=$(getopt --options hjvl:p: --longoptions help,json,verbose,location:,params: -n 'fetch_wttr' -- "$@")

  if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

  eval set -- "$TEMP"

  HELP=false
  LOCATION=''
  JSON=false
  WTTR_PARAMS='F'
  OVERRIDE_PARAMS=''
  EXIT_CODE=0
  VERBOSE=false

  VERBOSE_OUTPUT=""
  RED='\033[0;31m'
  CYAN='\033[0;36m'
  PINK='\033[0;35m'
  NC='\033[0m'

  while true; do
    case "$1" in
      -l | --location ) LOCATION="$2"; shift 2 ;;
      -p | --params ) OVERRIDE_PARAMS="$2"; shift 2 ;;
      -j | --json ) JSON=true; shift ;;
      -h | --help ) HELP=true; shift ;;
      -v | --verbose ) VERBOSE=true; shift ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done

  # Handle HELP
  if [[ -z "$LOCATION" ]]; then
      if [[ -z "$WTTR_LOC" ]]; then
          echo "${RED}ERROR:${NC} --location not specified and \$WTTR_LOC not set, printing help and exiting."
          HELP=true
          EXIT_CODE=1
      else
          VERBOSE_OUTPUT+="${CYAN}INFO:${NC} Using default location, ${PINK}$WTTR_LOC${NC}\n"
          LOCATION=$WTTR_LOC
      fi
  fi
  
  if [ $HELP == true ]; then
    echo "
  fetch_wttr -- fetch weather forecasts from wttr.in, with i3status compatibility
  
                 -l, --location [LOCATION]. If not specified, will attempt to read from environment variable \$WTTR_LOC. For format details, see: https://wttr.in/:help
                
                 -p, --params [PARAMS], override default WTTR_PARAMS. For format details, see https://wttr.in/:help
  
                 -j, --json, output in JSON format (e.g. to display in i3status bar). If --json is not specified, output a human-readable weather report to stdout. 

                 -h, --help

                 -v, --verbose, output additional information for debugging in the terminal

                 Dependencies: bash, getopt, curl"
    exit $EXIT_CODE
  fi

  # Apply overrides if they exist
  if [[ -z "$OVERRIDE_PARAMS" ]]; then
    # Form localized URL parameters for curl
    if [[ -t 1 ]] && [[ "$(tput cols)" -lt 125 ]]; then
        WTTR_PARAMS+='n'
    fi 2> /dev/null
    for _token in $( locale LC_MEASUREMENT ); do
      case $_token in
        1) WTTR_PARAMS+='m' ;;
        2) WTTR_PARAMS+='u' ;;
      esac
    done 2> /dev/null
    unset _token

    # One-liner format for terminal/status-bar output 
    if [[ $JSON == true ]]; then
        WTTR_PARAMS+="&format=%l:+%c+%t+%w+%m+%S/%s"
    fi
  else
    WTTR_PARAMS=$OVERRIDE_PARAMS
  fi

  export WTTR_PARAMS

  for p in $WTTR_PARAMS "$@"; do
    args+=" --data-urlencode $p "
  done

  # wttr.in call
  cmd='curl -fGsS -H "Accept-Language: ${LANG%_*}" --compressed "wttr.in/${LOCATION}?${WTTR_PARAMS}"'

  # handle verbose output
  if [[ $VERBOSE == true ]]; then
     VERBOSE_OUTPUT+="${CYAN}INFO:${NC} Running ${cmd}\n\t${PINK}LOCATION${NC}=${LOCATION}\n\t${PINK}WTTR_PARAMS${NC}=${WTTR_PARAMS}\n\t${PINK}JSON${NC}=${JSON}\n\t${PINK}LANG${NC}=${LANG%_*}"
     echo -e $VERBOSE_OUTPUT
  fi

  if [[ $JSON == true ]]; then
    # JSON format
    CURL_OUT=$(eval $cmd)
    echo "{\"text\": \"${CURL_OUT}\"}"
  else
    # Term format
    eval $cmd
  fi
  exit $EXIT_CODE
}

run_fetch_wttr "$@"
# END OF PROGRAM
